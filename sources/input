/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   input.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ftrujill <ftrujill@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/11 15:08:43 by ftrujill          #+#    #+#             */
/*   Updated: 2019/12/11 19:08:32 by ftrujill         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/lem_in.h"

size_t	ft_sizetab(char const *s, char c)
{
	size_t	i;

	i = 0;
	while (*s)
	{
		while (*s == c)
			s++;
		i = *s ? i + 1 : i;
		while (*s && *s != c)
			s++;
	}
	return (i);
}

int		ft_list_size(t_list *begin_list)
{
	int i;

	if (begin_list == NULL)
		return (0);
	i = 1;
	while (begin_list->next != NULL)
	{
		begin_list = begin_list->next;
		i++;
	}
	return (i);
}

void	ft_list_sort(t_list **begin_list, int (*cmp)())
{
	t_list	*tmp;
	void	*dataswap;

	if (*begin_list == NULL)
		return ;
	if ((*begin_list)->next == NULL)
		return ;
	tmp = *begin_list;
	while (tmp->next != NULL)
	{
		if (cmp(tmp->content, (tmp->next)->content) > 0)
		{
			dataswap = tmp->content;
			tmp->content = (tmp->next)->content;
			(tmp->next)->content = dataswap;
			tmp = *begin_list;
		}
		else
			tmp = tmp->next;
	}
}

char   **list_to_tab(t_list *rooms)
{
    char    **tab;
    char    *str;
    int     i;
    int     size;

    ft_list_sort(&rooms, &ft_strcmp);
    size = ft_list_size(rooms);
    if (!(tab = (char**)malloc(sizeof(char*) * (size + 1))))
        return (NULL);
    i = -1;
    while (++i < size)
    {
        if (!(str = ft_strdup(rooms->content + 1)))
            return (NULL);
        tab[i] = str;
        rooms = rooms->next;
    }
    tab[i] = 0;
    return (tab);
}

int     find_room(char **room_name, char *name)
{
    int i;

    i = 0;
    while(room_name[i])
    {
        if (ft_strcmp(room_name[i], name) == 0)
            return (i);
        i++;
    }
    return (-1);
}

int     add_link(char **room_name, int **graph, char *line)
{
    char *str;
    char **tab;
    int r1;
    int r2;
    int i;

    if (ft_sizetab(line, '-') != 2)
        return (0);
    tab = ft_strsplit(line, '-');
        ft_printf("The rooms are \n");
    r1 = find_room(room_name, tab[1]);
    r2 = find_room(room_name, tab[2]);
    if (r1 == -1 || r2 == -1)
        return (0);
    i = 0;
    ft_printf("The rooms are %d and %d\n", r1, r2);
    while (graph[r1][i] != -1)
        i++;
    graph[r1][i++] = r2;
    graph[r2][i] = -1;
    return (1);
}

int     check_links(t_list *rooms, char **tab, char *line)
{
    char **room_name;
    int **graph;
    char *str;
    int size;
    int i;

    room_name = list_to_tab(rooms);
    size = ft_list_size(rooms);
    if (!(graph = (int**)malloc(sizeof(int*) * size)))
        return (0); //Malloc error
    i = 0;
    while (i < size)
    {
        if (!(graph[i] = (int*)malloc(sizeof(int) * size)))
            return (0); //Malloc error
        graph[i++][0] = -1;
    }
            ft_printf("Here\n");
    if (!add_link(room_name, graph, line))
        return (0); //Bad link;
                ft_printf("gege\n");
    free(line);
    while(get_next_line(0, &line))
    {
        ft_printf(line);
        ft_printf("\n");
        if (!add_link(room_name, graph, line))
            return (0); //Bad link;
    }
    return (1);
    //Need to free tab;
}

int     add_room(t_list *rooms, char *room_name, char type)
{
    char *str;

    if (!(str = ft_memalloc(ft_strlen(room_name)+ 2)))
        return (0);
    str[0] = type;
    str[1] = 0;
    ft_strcat(str, room_name);
    ft_lstadd(&rooms, ft_lstnew(str, ft_strlen(str)));
    return (1);
}

int     check_room(char **tab)
{
    if (!tab || !tab[0] || !tab[1] || !tab[2] || tab[3])
        return (0);
    if (!ft_isstrnum(tab[1]) || !ft_isstrnum(tab[2]))
        return (0);
    return (1);
}

int main()
{
    char    *line;
    char    *str;
    char    **tab;
    t_list  *rooms;

    if (!get_next_line(0, &line) || !ft_isstrnum(line))
        return (-1); // Bad ants number, havent freed line
    ft_printf(line);
    ft_printf("\n");
    rooms = ft_lstnew(line, ft_strlen(line));
    free(line);
    while (get_next_line(0, &line))
    {
        ft_printf(line);
        ft_printf("\n");
        if (line[0] == '#' && line[0] != '#')
            continue;
        if (line[0] == '#' && line[1] == '#')
        {
            if (!ft_strcmp(line, "##end"))
            {
                free(line);
                if (!get_next_line(0, &line) || !(tab = ft_strsplit(line, ' ')) || !tab[1] || !check_room(tab))
                    return (-1); // No end || Malloc error || Not well defined end || Bad room, havent freed line, tab
                add_room(rooms, tab[1], 'C');
                free(line); //Need to free tab
            }
            else if (!ft_strcmp(line, "##start"))
            {
                free(line);
                if (!get_next_line(0, &line) || !(tab = ft_strsplit(line, ' ')) || !tab[1] || !check_room(tab))
                    return (-1); // No end || Malloc error || Not well defined end || Bad room, havent freed line, tab
                add_room(rooms, tab[1], 'A');
                free(line); //Need to free tab
            }
            else
                return (-1); //Error endpoint havent freed line
        }
        else if (line[0] != '#')
        {
            if (!(tab = ft_strsplit(line, ' ')))
                return (-1); //Malloc error, havent freed line
            if (!tab[1])
                {
                    if (!check_links(rooms, tab, line))
                        return (-1);
                }
            else
            {
                if (!check_room(tab))
                    return (-1); //Bad room, havent freed line
                                str = ft_memalloc(ft_strlen(tab[1] + 2));
                add_room(rooms, tab[1], 'B');
                free(line); //Need to free tab
            }
        }
    }
}